unit CDPAsignacionTerceros;

interface

uses
  SysUtils, Classes, DB, DBTables;

type
  TDPAsignacionTerceros = class(TDataModule)
    QKilosSalida: TQuery;
    QEnvase: TQuery;
    QAux: TQuery;
    procedure DataModuleCreate(Sender: TObject);
    procedure DataModuleDestroy(Sender: TObject);
  private
    { Private declarations }
    sEmpresaTerceros: string;
    QPrecioMedio, QAlbFacturado, QAlbDevolucion: TQuery;

    function  SQLPropios( const ACategoria: string ): string;
    function  SQLTerceros( const ACategoria: string ): string;
    procedure AsignarKilos( const AEmpresa, ACentro, AProducto: string;
              const AFechaIni, AFechaFin: TDateTime; const ADestino: string; const AKilos: Real );
    function  SepararKilosLinea( const ADestino: string; const AKilos: Real ): real;
    procedure PreparaQuerys(const ACategoria: string);
    function  AlbaranFacturado( const AEmpresa: string; const ACentro: String; const AAlbaran: integer; AFecha: string): Boolean;
    function  EsDevolucion( const AEmpresa: string; const ACentro: String; const AAlbaran: integer; AFecha: string): Boolean;
    procedure CalcularPrecioMedioVenta( const AEmpresa, ACentro, AProducto: String; AFechaIni, AFechaFin: TDateTime; var vPMV: currency);
    function ObtenerMaxLineaAlbaran(AEmpresa, ACentro, AAlbaran, AFecha: String): integer;

  public
    { Public declarations }
    procedure AsignarKilosTerceros( const AEmpresa, ACentro, AProducto, ACategoria: string;
              const AFechaIni, AFechaFin: TDateTime; const AKilos: Real );
  end;


var
  DPAsignacionTerceros: TDPAsignacionTerceros;

implementation

{$R *.dfm}

uses Dialogs, CDAPrincipal, Math;

function TDPAsignacionTerceros.SQLPropios( const ACategoria: string ): string;
begin
  result:= ' select  * ';
  result:= result + ' from frf_salidas_l ' + #13 + #10;
  result:= result + ' where empresa_sl = :empresa ' + #13 + #10;
  result:= result + ' and centro_salida_sl = :centro ' + #13 + #10;
  result:= result + ' and fecha_sl between :fechaini and :fechafin ' + #13 + #10;
  result:= result + ' and producto_sl = :producto ' + #13 + #10;
  if ACategoria = 'D' then
  begin
    result:= result + ' and (categoria_sl = ''2B'' or  categoria_sl = ''3B'') ' + #13 + #10;
  end
  else
  begin
    result:= result + ' and categoria_sl = ' + QuotedStr( ACategoria ) + ' ' + #13 + #10;
  end;
  result:= result + ' and emp_procedencia_sl = :empresa or emp_procedencia_sl is null ' + #13 + #10;
  result := result + ' and (importe_neto_sl/kilos_sl) between :pmvdesde and :pmvhasta '  + #13 + #10;
  result := result + ' and kilos_sl <> 0 ' + #13 + #10;
  result:= result + ' order by fecha_sl ';
end;

function TDPAsignacionTerceros.SQLTerceros( const ACategoria: string ): string;
begin
  result:= ' select * ';
  result:= result + ' from frf_salidas_l ' + #13 + #10;
  result:= result + ' where empresa_sl = :empresa ' + #13 + #10;
  result:= result + ' and centro_salida_sl = :centro ' + #13 + #10;
  result:= result + ' and fecha_sl between :fechaini and :fechafin ' + #13 + #10;
  result:= result + ' and producto_sl = :producto ' + #13 + #10;
  if ACategoria = 'D' then
  begin
    result:= result + ' and categoria_sl in (''2B'',''3B'') ' + #13 + #10;
  end
  else
  begin
    result:= result + ' and categoria_sl = ' + QuotedStr( ACategoria ) + ' ' + #13 + #10;
  end;
  result:= result + ' and emp_procedencia_sl = ' + QuotedStr( sEmpresaTerceros ) + '  ' + #13 + #10;
  result:= result + ' order by fecha_sl desc ';
end;


procedure TDPAsignacionTerceros.DataModuleCreate(Sender: TObject);
begin
  sEmpresaTerceros:= '501';

  with QEnvase do
  begin
    SQL.Clear;
    SQL.Add( ' select peso_variable_e, peso_neto_e, unidades_e ');
    SQL.Add( ' from frf_envases ');
    SQL.Add( ' where envase_e = :envase ');
    SQL.Add( ' and producto_e = :producto ');

    //Prepare;
  end;
end;

procedure TDPAsignacionTerceros.DataModuleDestroy(Sender: TObject);
  procedure Desprepara( var VQuery: TQuery );
  begin
    VQuery.Cancel;
    VQuery.Close;
    if VQuery.Prepared then
      VQuery.UnPrepare;
  end;
begin
  //Desprepara( QEnvase );
end;

procedure TDPAsignacionTerceros.PreparaQuerys(const ACategoria: string);
begin
  QPrecioMedio := TQuery.Create(Self);
  with QPrecioMedio do
  begin
    DataBaseName := 'DBPrincipal';
    SQL.Clear;
    SQL.Add(' select sum(CASE when kilos_sl = 0 then 0 else importe_neto_sl/kilos_sl END)/count(*) precio_medio ');
    SQL.Add('   from frf_salidas_l ');
    SQL.Add('  where empresa_sl = :empresa ');
    SQL.Add('    and centro_salida_sl = :centro  ');
    SQL.Add('    and fecha_sl between :fechaini and :fechafin ');
    SQL.Add('    and producto_sl = :producto ');
    SQL.Add('    and categoria_sl = ' + QuotedStr( ACategoria )  );

    Prepare;
  end;

  QAlbFacturado := TQuery.Create(Self);
  with QAlbFacturado do
  begin
    DataBaseName := 'DBPrincipal';
    SQL.Clear;
    SQL.Add(' select n_factura_sc from frf_salidas_c ');
    SQL.Add('  where empresa_sc = :empresa ');
    SQL.Add('    and centro_salida_sc = :centro ');
    SQL.Add('    and n_albaran_sc = :albaran ');
    SQL.Add('    and fecha_sc = :fecha ');

    Prepare;
  end;

  QAlbDevolucion := TQuery.Create(Self);
  with QAlbDevolucion do
  begin
    DataBaseName := 'DBPrincipal';
    SQL.Clear;
    SQL.Add(' select * from frf_salidas_c ');
    SQL.Add('  where empresa_sc = :empresa ');
    SQL.Add('    and centro_salida_sc = :centro ');
    SQL.Add('    and n_albaran_sc = :albaran ');
    SQL.Add('    and fecha_sc = :fecha ');
    SQL.Add('    and es_transito_sc = 2 ');         //Tipo Salida: Devolucion

    Prepare;
  end;

end;

procedure TDPAsignacionTerceros.AsignarKilosTerceros( const AEmpresa, ACentro, AProducto, ACategoria: string;
              const AFechaIni, AFechaFin: TDateTime; const AKilos: Real );
begin
  PreparaQuerys(ACategoria);
  if AKilos < 0 then
  begin
    QKilosSalida.SQL.Clear;
    QKilosSalida.SQL.Add( SQLTerceros( ACategoria ) );
    AsignarKilos( AEmpresa, ACentro, AProducto, AFechaIni, AFechaFin, AEmpresa, Abs( AKilos ) );
  end
  else
  if AKilos > 0 then
  begin
    QKilosSalida.SQL.Clear;
    QKilosSalida.SQL.Add( SQLPropios( ACategoria ) );
    AsignarKilos( AEmpresa, ACentro, AProducto, AFechaIni, AFechaFin, sEmpresaTerceros, AKilos );
  end;
end;

procedure TDPAsignacionTerceros.CalcularPrecioMedioVenta(const AEmpresa, ACentro, AProducto: String; AFechaIni, AFechaFin: TDateTime;var vPMV: currency);
begin
  with QPrecioMedio do
  begin
    if Active then
      Close;

    ParamByName('empresa').AsString := AEmpresa;
    ParamByName('centro').AsString := ACentro;
    ParamByName('fechaini').AsDateTime := AFechaIni;
    ParamByName('fechafin').AsDateTime := AFechaFin;
    ParamByName('producto').AsString := AProducto;

    Open;

    vPMV := FieldByName('precio_medio').AsFloat;
  end;
end;

function TDPAsignacionTerceros.AlbaranFacturado(const AEmpresa, ACentro: String; const AAlbaran: integer; AFecha: string): Boolean;
begin
  with QAlbFacturado do
  begin
    if Active then
    Close;

    ParamByName('empresa').AsString := AEmpresa;
    ParamByName('centro').AsString := ACentro;
    ParamByName('albaran').AsInteger := AAlbaran;
    ParamByName('fecha').AsString := AFecha;
    Open;

    Result := (FieldByName('n_factura_sc').AsString <> '');
  end;
end;

function TDPAsignacionTerceros.EsDevolucion(const AEmpresa, ACentro: String;
  const AAlbaran: integer; AFecha: string): Boolean;
begin
  with QAlbDevolucion do
  begin
    if Active then
    Close;

    ParamByName('empresa').AsString := AEmpresa;
    ParamByName('centro').AsString := ACentro;
    ParamByName('albaran').AsInteger := AAlbaran;
    ParamByName('fecha').AsString := AFecha;
    Open;

    Result := not IsEmpty;
  end;
end;

function TDPAsignacionTerceros.ObtenerMaxLineaAlbaran(AEmpresa, ACentro, AAlbaran, AFecha: String): integer;
begin
  with QAux do
  begin
    if Active then
    Close;

    SQL.Clear;
    SQL.Add(' select max(id_linea_albaran_sl) n_linea from frf_salidas_l ');
    SQL.Add('  where empresa_sl = :empresa                               ');
    SQL.Add('    and centro_salida_sl = :centro                          ');
    SQL.Add('    and n_albaran_sl = :albaran                             ');
    SQL.Add('    and fecha_sl = :fecha                                   ');

    ParamByName('empresa').AsString := AEmpresa;
    ParamByName('centro').AsString := ACentro;
    ParamByName('albaran').AsString := AAlbaran;
    ParamByName('fecha').AsString := AFecha;
    Open;

    Result := FieldByName('n_linea').AsInteger;
  end;
end;

procedure TDPAsignacionTerceros.AsignarKilos( const AEmpresa, ACentro, AProducto: string; const AFechaIni, AFechaFin: TDateTime; const ADestino: string; const AKilos: Real );
var
  rAux, rSep: Real;
  rPMV, rPMVDesde, rPMVHasta: currency;
begin
  rPMV := 0;
  rAux:= AKilos;
  CalcularPrecioMedioVenta(AEmpresa, ACentro, AProducto, AFechaIni, AFechaFin, rPMV);
  rPMVDesde := (rPMV * 70) / 100;   //70% del precio medio de venta
  rPMVHasta := (rPMV * 120) / 100;  //120% del precio medio de venta

  QKilosSalida.ParamByName('empresa').AsString:= AEmpresa;
  QKilosSalida.ParamByName('centro').AsString:= ACentro;
  QKilosSalida.ParamByName('producto').AsString:= AProducto;
  QKilosSalida.ParamByName('fechaini').AsDateTime:= AFechaIni;
  QKilosSalida.ParamByName('fechafin').AsDateTime:= AFechaFin;
  QKilosSalida.ParamByName('pmvdesde').AsFloat:= rPMVDesde;
  QKilosSalida.ParamByName('pmvhasta').AsFloat:= rPMVHasta;
  QKilosSalida.Open;

  
  if not QKilosSalida.IsEmpty then
  begin
    while rAux > 0 do
    begin
      if ( AlbaranFacturado(QKilosSalida.FieldByName('empresa_sl').AsString, QKilosSalida.FieldByName('centro_salida_sl').AsString,
                            QKilosSalida.FieldByName('n_albaran_sl').AsInteger, QKilosSalida.FieldByName('fecha_sl').AsString) ) and
         ( not EsDevolucion(QKilosSalida.FieldByName('empresa_sl').AsString, QKilosSalida.FieldByName('centro_salida_sl').AsString,
                            QKilosSalida.FieldByName('n_albaran_sl').AsInteger, QKilosSalida.FieldByName('fecha_sl').AsString) )   then
      begin
        if rAux >= QKilosSalida.FieldByName('kilos_sl').AsFloat then
        begin
          QKilosSalida.Edit;
          QKilosSalida.FieldByName('emp_procedencia_sl').AsString:= ADestino;
          QKilosSalida.Post;
          rAux:= rAux - QKilosSalida.FieldByName('kilos_sl').AsFloat;
        end
        else
        begin
          rSep:= SepararKilosLinea( ADestino, rAux );
          if rSep = 0 then
            rAux := 0
          else
            rAux:= rAux - rSep;
        end;
      end;
      QKilosSalida.Next;
    end;
  end;
  QKilosSalida.Close;
end;

function TDPAsignacionTerceros.SepararKilosLinea( const ADestino: string; const AKilos: Real ): real;
var
  empresa_sl, centro_salida_sl, centro_origen_sl, producto_sl, envase_sl,
  marca_sl, categoria_sl, calibre_sl, color_sl, unidad_precio_sl, tipo_iva_sl,
  federacion_sl, cliente_sl, emp_procedencia_sl, tipo_palets_sl, comercial_sl: string;
  n_albaran_sl, ref_transitos_sl, n_linea: integer;
  fecha_sl: TDateTime;
  precio_sl, porc_iva_sl: real;

  cajas_1, n_palets_1, cajas_2, n_palets_2: integer;
  kilos_1, importe_neto_1, iva_1, importe_total_1, kilos_2, importe_neto_2, iva_2, importe_total_2: real;

  iUnidades: integer;
  rPesoNetoCaja: real;
  bPesoVariable: boolean;
  rKilos: Real;
begin
(*
  empresa_sl, centro_salida_sl, n_albaran_sl, fecha_sl, centro_origen_sl, producto_sl,
  envase_sl, marca_sl, categoria_sl, calibre_sl, color_sl, ref_transitos_sl,
  precio_sl, unidad_precio_sl, porc_iva_sl, tipo_iva_sl, federacion_sl, cliente_sl,

  cajas_sl, kilos_sl, importe_neto_sl, iva_sl, importe_total_sl, n_palets_sl, emp_procedencia_sl
*)
  result:= 0;

  empresa_sl:= QKilosSalida.FieldByName('empresa_sl').AsString;
  centro_salida_sl:= QKilosSalida.FieldByName('centro_salida_sl').AsString;
  centro_origen_sl:= QKilosSalida.FieldByName('centro_origen_sl').AsString;
  producto_sl:= QKilosSalida.FieldByName('producto_sl').AsString;
  envase_sl:= QKilosSalida.FieldByName('envase_sl').AsString;
  marca_sl:= QKilosSalida.FieldByName('marca_sl').AsString;
  categoria_sl:= QKilosSalida.FieldByName('categoria_sl').AsString;
  calibre_sl:= QKilosSalida.FieldByName('calibre_sl').AsString;
  color_sl:= QKilosSalida.FieldByName('color_sl').AsString;
  unidad_precio_sl:= QKilosSalida.FieldByName('unidad_precio_sl').AsString;
  tipo_iva_sl:= QKilosSalida.FieldByName('tipo_iva_sl').AsString;
  federacion_sl:= QKilosSalida.FieldByName('federacion_sl').AsString;
  cliente_sl:= QKilosSalida.FieldByName('cliente_sl').AsString;
  n_albaran_sl:= QKilosSalida.FieldByName('n_albaran_sl').AsInteger;
//  if not QKilosSalida.FieldByName('ref_transitos_sl').IsNull then
//    ref_transitos_sl:= QKilosSalida.FieldByName('ref_transitos_sl').AsInteger;
  fecha_sl:= QKilosSalida.FieldByName('fecha_sl').AsDateTime;
  precio_sl:= QKilosSalida.FieldByName('precio_sl').AsFloat;
  porc_iva_sl:= QKilosSalida.FieldByName('porc_iva_sl').AsFloat;
  emp_procedencia_sl:= QKilosSalida.FieldByName('emp_procedencia_sl').AsString;
  tipo_palets_sl:= QKilosSalida.FieldByName('tipo_palets_sl').AsString;
  comercial_sl:= QKilosSalida.FieldByName('comercial_sl').AsString;


  QEnvase.ParamByName('envase').AsString:= QKilosSalida.FieldByName('envase_sl').AsString;
  QEnvase.ParamByName('producto').AsString:= QKilosSalida.FieldByName('producto_sl').AsString;
  QEnvase.Open;
  if not QEnvase.IsEmpty then
  begin
    iUnidades:= QEnvase.FieldByName('unidades_e').AsInteger;
    rPesoNetoCaja:= QEnvase.FieldByName('peso_neto_e').AsFloat;
    if rPesoNetoCaja = 0 then
    begin
      if QKilosSalida.FieldByName('cajas_sl').AsFloat > 0 then
       begin
        rPesoNetoCaja:= SimpleRoundTo( QKilosSalida.FieldByName('kilos_sl').AsFloat / QKilosSalida.FieldByName('cajas_sl').AsFloat, -2 );
      end
      else
      begin
        rPesoNetoCaja:= 0;
      end;
    end;
    bPesoVariable:= QEnvase.FieldByName('peso_variable_e').AsInteger <> 0;
  end
  else
  begin
    iUnidades:= 0;
    if QKilosSalida.FieldByName('cajas_sl').AsFloat > 0 then
    begin
      rPesoNetoCaja:= SimpleRoundTo( QKilosSalida.FieldByName('kilos_sl').AsFloat / QKilosSalida.FieldByName('cajas_sl').AsFloat, -2 );
    end
    else
    begin
      rPesoNetoCaja:= 0;
    end;
    if rPesoNetoCaja = 0 then
    begin
      bPesoVariable:= True;
    end
    else
    begin
      bPesoVariable:= ( rPesoNetoCaja - Trunc( rPesoNetoCaja ) ) <> 0;
    end;
  end;
  QEnvase.Close;
  if not bPesoVariable then
  begin
    rKilos:= SimpleRoundTo( Trunc( AKilos / rPesoNetoCaja ) * rPesoNetoCaja, -2 );
  end
  else
  begin
    rKilos:= AKilos;
  end;


  kilos_1:= rKilos;
  kilos_2:= QKilosSalida.FieldByName('kilos_sl').AsFloat - rKilos;

  if rPesoNetoCaja > 0 then
  begin
    cajas_1:= Trunc( SimpleRoundTo( ( rKilos / rPesoNetoCaja ), 0 ) );
  end
  else
  begin
    cajas_1:= 0;
  end;
  cajas_2:= QKilosSalida.FieldByName('cajas_sl').AsInteger - cajas_1;

  if QKilosSalida.FieldByName('kilos_sl').AsFloat > 0 then
  begin
    n_palets_1:= Trunc( SimpleRoundTo( ( rKilos * QKilosSalida.FieldByName('n_palets_sl').AsFloat ) / QKilosSalida.FieldByName('kilos_sl').AsFloat, 0 ) );
  end
  else
  begin
    n_palets_1:= 0;
  end;
  n_palets_2:= QKilosSalida.FieldByName('n_palets_sl').AsInteger - n_palets_1;

  if Copy( QKilosSalida.FieldByName('unidad_precio_sl').AsString, 1, 1 ) = 'C' then
  begin
    importe_neto_1:= QKilosSalida.FieldByName('precio_sl').AsFloat * cajas_1;
  end
  else
  if Copy( QKilosSalida.FieldByName('unidad_precio_sl').AsString, 1, 1 ) = 'U' then
  begin
    if iUnidades > 0 then
    begin
      importe_neto_1:= SimpleRoundTo( QKilosSalida.FieldByName('precio_sl').AsFloat * cajas_1 * iUnidades, -2 );
    end
    else
    begin
      importe_neto_1:= SimpleRoundTo( ( rKilos * QKilosSalida.FieldByName('importe_neto_sl').AsFloat ) / QKilosSalida.FieldByName('kilos_sl').AsFloat, -2 );
    end;
  end
  else
  begin
    importe_neto_1:= QKilosSalida.FieldByName('precio_sl').AsFloat * kilos_1;
  end;

  importe_neto_1:= SimpleRoundTo( ( rKilos * QKilosSalida.FieldByName('importe_neto_sl').AsFloat ) / QKilosSalida.FieldByName('kilos_sl').AsFloat, -2 );
  importe_neto_2:= QKilosSalida.FieldByName('importe_neto_sl').AsFloat - importe_neto_1;

  iva_1:= SimpleRoundTo( ( importe_neto_1 * QKilosSalida.FieldByName('porc_iva_sl').AsFloat ) / 100, -2 );
  iva_2:= QKilosSalida.FieldByName('iva_sl').AsFloat - iva_1;

  importe_total_1:= importe_neto_1 + iva_1;
  importe_total_2:= QKilosSalida.FieldByName('importe_total_sl').AsFloat - importe_total_1;

//  n_linea := QKilosSalida.FieldByName('id_linea_albaran_sl').AsInteger;
  n_linea := ObtenerMaxLineaAlbaran (QKilosSalida.FieldByName('empresa_sl').AsString, QKilosSalida.FieldByName('centro_salida_sl').AsString,
                                     QKilosSalida.FieldByName('n_albaran_sl').AsString, QKilosSalida.FieldByName('fecha_sl').AsString);
  if kilos_1 <> 0  then
  begin
    if not QKilosSalida.Database.InTransaction then
    begin
      QKilosSalida.Database.StartTransaction;
      try
        with QKilosSalida do
        begin
          Edit;
          QKilosSalida.FieldByName('cajas_sl').AsInteger:= cajas_1;
          QKilosSalida.FieldByName('n_palets_sl').AsInteger:= n_palets_1;
          QKilosSalida.FieldByName('kilos_sl').AsFloat:= kilos_1;
          QKilosSalida.FieldByName('importe_neto_sl').AsFloat:= importe_neto_1;
          QKilosSalida.FieldByName('iva_sl').AsFloat:= iva_1;
          QKilosSalida.FieldByName('importe_total_sl').AsFloat:= importe_total_1;
          QKilosSalida.FieldByName('emp_procedencia_sl').AsString:= ADestino;
          Post;
        end;

        with QKilosSalida do
        begin
          Insert;
          QKilosSalida.FieldByName('empresa_sl').AsString:= empresa_sl;
          QKilosSalida.FieldByName('centro_salida_sl').AsString:= centro_salida_sl;
          QKilosSalida.FieldByName('centro_origen_sl').AsString:= centro_origen_sl;
          QKilosSalida.FieldByName('producto_sl').AsString:= producto_sl;
          QKilosSalida.FieldByName('envase_sl').AsString:= envase_sl;
          QKilosSalida.FieldByName('marca_sl').AsString:= marca_sl;
          QKilosSalida.FieldByName('categoria_sl').AsString:= categoria_sl;
          QKilosSalida.FieldByName('calibre_sl').AsString:= calibre_sl;
          QKilosSalida.FieldByName('color_sl').AsString:= color_sl;
          QKilosSalida.FieldByName('unidad_precio_sl').AsString:= unidad_precio_sl;
          QKilosSalida.FieldByName('tipo_iva_sl').AsString:= tipo_iva_sl;
          QKilosSalida.FieldByName('federacion_sl').AsString:= federacion_sl;
          QKilosSalida.FieldByName('cliente_sl').AsString:= cliente_sl;
          QKilosSalida.FieldByName('n_albaran_sl').AsInteger:= n_albaran_sl;
//          if IntToStr(ref_transitos_sl) <> '' then
//            QKilosSalida.FieldByName('ref_transitos_sl').AsInteger:= ref_transitos_sl;
          QKilosSalida.FieldByName('fecha_sl').AsDateTime:= fecha_sl;
          QKilosSalida.FieldByName('precio_sl').AsFloat:= precio_sl;
          QKilosSalida.FieldByName('porc_iva_sl').AsFloat:= porc_iva_sl;

          QKilosSalida.FieldByName('cajas_sl').AsInteger:= cajas_2;
          QKilosSalida.FieldByName('n_palets_sl').AsInteger:= n_palets_2;
          QKilosSalida.FieldByName('kilos_sl').AsFloat:= kilos_2;
          QKilosSalida.FieldByName('importe_neto_sl').AsFloat:= importe_neto_2;
          QKilosSalida.FieldByName('iva_sl').AsFloat:= iva_2;
          QKilosSalida.FieldByName('importe_total_sl').AsFloat:= importe_total_2;
          QKilosSalida.FieldByName('emp_procedencia_sl').AsString:= emp_procedencia_sl;
          QKilosSalida.FieldByName('tipo_palets_sl').AsString := tipo_palets_sl;
          QKilosSalida.FieldByName('comercial_sl').AsString := comercial_sl;
          QKilosSalida.FieldByName('id_linea_albaran_sl').AsInteger := n_linea + 1;

          Post;
        end;
        QKilosSalida.Database.Commit;
        result:= rKilos;
      except
        QKilosSalida.Database.Rollback;
        ShowMessage('Error al separar lineas de salidas, por favor intentelo mas tarde.');
      end;
    end
    else
    begin
      ShowMessage('En este momento no se pueden separar lineas de salidas, por favor intentelo mas tarde.');
    end;
  end
  else
  begin
    ShowMessage('Kilos = 0.');
  end;
end;

end.

